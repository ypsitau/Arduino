#!/usr/bin/env gurax
import(json)
import(argopt)

argopt.Parser {|p|
	p.OptBool('help', 'h', 'print help')
	p.OptBool('no-opt', 'n', 'no optimization')
	p.OptBool('verbose', 'v', 'prints the executed command')
	try {
		[argv, opt] = p.Parse(sys.argv)
	} catch {|e|
		sys.cerr.Println(e.text)
		sys.Exit(1)
	}
}
if (opt['help']) {
	sys.cerr.Print(R'''
	usage: arduino-genasm.gura dir
	
	Generate an assembler file from the C/C++ source code. The argumet dir specifes a directory
	where files created by arduino-cli are stored. The directory can be specified by passing --build-path
	option to arduino-cli, Example:
	  arduino-cli compile --fqbn arduino:avr:uno --build-path build
	  gurax arduino-genasm.gura build
	'''	)
	sys.Exit()
}
noOptFlag = opt['no-opt']
dirNameBuild = cond(argv.len == 0, 'build', argv[0])
pathNameCompileCommands = path.Join(dirNameBuild, 'compile_commands.json')
if (!path.Exists(pathNameCompileCommands)) {
	sys.cerr.Printf('arduino-genasm: %s is not found\n', pathNameCompileCommands)
	sys.Exit(1)
}
doc = json.Read(pathNameCompileCommands)
doc.Each {|record|
	args = record['arguments']
	cmd = args[0]
	argsExclude = ['-c', '-g', '-MMD', '-flto']
	argsExcludeAndSkip = ['-o']
	argsMod = ['-S', '-fverbose-asm']
	skipFlag = false
	args.Offset(1).Each {|arg|
		if (skipFlag) {
			skipFlag = false
		} elsif (arg in argsExcludeAndSkip) {
			skipFlag = true
		} elsif (arg in argsExclude || (noOptFlag && arg.StartsWith('-O'))) {
			// nothing to do
		} else {
			argsMod.Add(arg)
			if (!arg.StartsWith('-')) {
				pathNameSrc = arg
			}
		}
	}
	pathNameAsm = path.Join(dirNameBuild, path.BaseName(path.FileName(pathNameSrc)) + '.s')
	argsMod.Add('-o', pathNameAsm)
	os.Exec(cmd, argsMod*)
	opt['verbose'] && Println(cmd + ' ' + argsMod.Join(' '))
	sys.cerr.Printf('%s was generated%s\n', pathNameAsm, cond(noOptFlag, ' without optimization', ''))
}
